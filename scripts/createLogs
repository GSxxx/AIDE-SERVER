#!/bin/bash
HOME_DIR="/home/aide/aide"
info () {
	echo -e "   $1"
}
ok () {
	echo -e "   [\e[32mOK\e[0m] $1"
}
warrning () {
	echo -e "   [\e[93mWARRNING\e[0m] $1"
}
error () {
	echo -e "   [\e[31mERROR\e[0m] $1"
	exit ${2}
}
if ! ls ${HOME_DIR}/clients > /dev/null; then
	info "No registered clients."
fi
for client in $(ls ${HOME_DIR}/clients); do
	CLIENT_LOGS="${HOME_DIR}/clients/${client}/logs"
	CLIENT_RECOVERY="${HOME_DIR}/clients/${client}/recovery"
	echo "Client ${client}:"
	COUNT="$(ls ${HOME_DIR}/spool | grep -P "^${client}-[0-9]{10}" | wc -l)"
	if [ ${COUNT} -ge 2 ]; then
		NEWER="$(ls ${HOME_DIR}/spool | grep -P "^${client}-[0-9]{10}" | sort -r | sed -n '1p')"
		if [ -f "${CLIENT_LOGS}/${NEWER}" ]; then
			info "No new version available for this client."
			continue
		else
			info "New version has been found: ${NEWER}"
		fi
		OLDER=$(ls ${HOME_DIR}/spool | grep -P "^${client}-[0-9]{10}" | sort -r | sed -n '2p')
		info "Recent version has been found: ${OLDER}"
		info "Setting up conf file."
		cat ${HOME_DIR}/conf/${client}.conf | sed -r "s|^(database=file:).*$|\1${HOME_DIR}/spool/${OLDER}|" | sed -r "s|^(database_new=file:).*$|\1${HOME_DIR}/spool/${NEWER}|" > /tmp/xxx
		cat /tmp/xxx > ${HOME_DIR}/conf/${client}.conf
		info "Comparing databases. Please wait..."
		aide_error_log="${HOME_DIR}/logs/aide-`date +%s`"
		std_log="${CLIENT_LOGS}/${NEWER}"
		/usr/sbin/aide -c ${HOME_DIR}/conf/${client}.conf --compare 1>${std_log} 2>${aide_error_log}
		if [ "$?" -lt 14 ]; then
			ok "Output has been saved to proper log file."
			if [ ! -s ${aide_error_log} ]; then
				rm -f ${aide_error_log}      
			fi
			${HOME_DIR}/scripts/nagios.sh ${client} > /dev/null
			if [ $? -eq 1 ]; then
				BACKUP_COMMAND="${HOME_DIR}/scripts/backup.sh -h ${client} "
				FILES_TO_CHANGE=$(awk 'BEGIN{FS=" ";ORS=" "}($0 ~ "^changed:"){print $2}' ${std_log})
				FILES_TO_ADD=$(awk 'BEGIN{FS=" ";ORS=" "}($0 ~ "^added:"){print $2}' ${std_log})
				FILES_TO_REMOVE=$(awk 'BEGIN{FS=" ";ORS=" "}($0 ~ "^removed:"){print $2}' ${std_log})
				if [ ! -z "${FILES_TO_CHANGE}" ]; then
					BACKUP_COMMAND+="-c ${FILES_TO_CHANGE}"
				fi
				if [ ! -z "${FILES_TO_ADD}" ]; then
					BACKUP_COMMAND+="-a ${FILES_TO_ADD}"
				fi
				if [ ! -z "${FILES_TO_REMOVE}" ]; then
					BACKUP_COMMAND+="-r ${FILES_TO_REMOVE}"
				fi
				if eval ${BACKUP_COMMAND};then
					ok "New files in recovery directory."
					${HOME_DIR}/scripts/backup.sh -h ${client} -n -c ${FILES_TO_CHANGE}
					if [[ $? != 5 ]]; then
						for file in ${FILES_TO_CHANGE}; do
							name=$(echo ${file} | sed 's#^.*/##')
							if ! ls ${CLIENT_RECOVERY} | grep -P "${name}\.old\.[0-9]{10}"; then 
								warrning "No such file in dump."
								continue
							fi
							OLD_VER=${CLIENT_RECOVERY}"/"$(ls ${CLIENT_RECOVERY} | grep "${name}\.old\." | sort -r | sed -ne '1p')
							NEW_VER=${CLIENT_RECOVERY}"/"$(ls ${CLIENT_RECOVERY} | grep "${name}\.new\." | sort -r | sed -ne '1p')
							DIFFERENCE=$(diff ${OLD_VER} ${NEW_VER} 2>/dev/null)
							diff_status=$?
							if [[ ${diff_status} == 1 ]]; then 
								sed "/^File: .*\/${name}$/s@.*@&\n${DIFFERENCE}\n@" ${std_log} > /tmp/xxx
								cat /tmp/xxx > ${std_log}
							elif [[ ${diff_status} == 2 ]]; then
								sed "/^File: .*\/${name}$/s@.*@&\nSome troubles were encountered while looking for differences.\n@" ${std_log} > /tmp/xxx
								cat /tmp/xxx > ${std_log}
							else
								sed "/^File: .*\/${name}$/s@.*@&\nNo differences were found. It means dump is corrupted.\n@" ${std_log} > /tmp/xxx
								cat /tmp/xxx > ${std_log}
							fi
						done
						for file in $(ls ${CLIENT_RECOVERY} | grep -P "\.new\.[0-9]{10}"); do
							rm -f ${file}
						done
					else
						sed "1s@.*@No dump initialized! backup.sh -i needed.\n\n&@" ${std_log} > /tmp/xxx
								cat /tmp/xxx > ${std_log}
					fi
				else
					error "Something went wrong while extracting files from archive." 6
				fi
			fi
		else
			if [ ! -s ${std_log} ]; then
				rm -f ${std_log}      
			fi
			error "Something went wrong during AIDE comparison. Check logs." 3
		fi
	else
		warrning "Not enough amount of versions has been provided."
	fi
done
echo "Additional operations: "
check=0
for file in $(ls ${HOME_DIR}/spool | grep -vP ^.+-[0-9]{10}); do
	info "   Removing trash file: ${file}"
	rm -f ${HOME_DIR}/spool/${file}
	check=1
done
if [[ ${check} == 0 ]]; then
	ok "No trash files in spool directory."
fi
check=0
list_of_clients=""
for client in $(ls ${HOME_DIR}/clients); do
	list_of_clients+=$(ls ${HOME_DIR}/spool | grep "${client}-")
done
for database in `ls ${HOME_DIR}/spool`; do
	if ! echo ${list_of_clients} | grep ${database} > /dev/null; then 
		info "   Removing unregistered client's database: ${database}"
		rm -f ${HOME_DIR}/spool/${database}
		check=1
	fi
done
if [[ ${check} == 0 ]]; then
	ok "No unregistered client's databases."
fi
check=0
for client in $(ls ${HOME_DIR}/clients); do
	for database in $(ls ${HOME_DIR}/spool | grep -P ^${client}-[0-9]{10} | sort -r | sed -n '3,$p'); do
		info "   Removing redundant database: ${database}"
		rm -f ${HOME_DIR}/spool/${database}
		check=1
	done
done
if [[ ${check} == 0 ]]; then
	ok "No redundant databases."
fi
if crontab -l 2>/dev/null | grep "0 \*/3 \* \* \* ~/aide/scripts/createLogs > ~/aide/logs/cron/cron-\`date +\\\%s\`" 1>/dev/null; then
	ok "Cron is set up correctly."
else
	if crontab ${HOME_DIR}/scripts/cron; then
		ok "Cron has been set."
	else
		warrning "Failed to set up cron."
	fi
fi
